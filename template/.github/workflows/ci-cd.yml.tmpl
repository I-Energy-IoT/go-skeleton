name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '**' ]

jobs:
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.20'
  #         cache: true

  #     - name: Install golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: v1.55.2

  #     - name: Run golangci-lint
  #       run: golangci-lint run ./...
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.filter.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check modified files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            version:
              - 'VERSION'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs.version == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Build
        run: go build -v ./...

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, build, changes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs.version == 'true'
    permissions:
      contents: write  # allow the workflow to push changes back to the repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Read version from VERSION file
      - name: Read version
        id: vars
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: dop_v1_${{ secrets.DIGITALOCEAN_TOKEN }}
          password: dop_v1_${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.digitalocean.com/ienergy-registry/{{.Name}}
          tags: |
            type=raw,value=${{ steps.vars.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Update Helm/values file with the newly built image tag ---
      - name: Update image tag in deployment/prd.yaml
        env:
          VERSION: ${{ steps.vars.outputs.VERSION }}
        run: |
          echo "Updating image tag to $VERSION in deployment/prd.yaml"
          sed -i -E "s/^([[:space:]]*tag:[[:space:]]*).*/\1$VERSION/" deployment/prd.yaml

      - name: Commit and push updated prd.yaml
        env:
          VERSION: ${{ steps.vars.outputs.VERSION }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          # Add and commit changes if any
          if ! git diff --quiet; then
            git add deployment/prd.yaml
            git commit -m "chore: update image tag to $VERSION [skip ci]"
            git push origin HEAD:main
          else
            echo "No changes to commit."
          fi 