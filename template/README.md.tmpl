# {{.Name}}

```
  ██████╗ ███████╗███████╗████████╗     █████╗ ██████╗ ██╗
  ██╔══██╗██╔════╝██╔════╝██╔═════╝    ██╔══██╗██╔══██╗██║
  ██████╔╝█████╗  ███████╗██║         ███████║██████╔╝██║
  ██╔══██╗██╔══╝  ╚════██║██║         ██╔══██║██╔═══╝ ██║
  ██║  ██║███████╗███████║██║         ██║  ██║██║     ██║
  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝         ╚═╝  ╚═╝╚═╝     ╚═╝

                  🚀 {{.Name}} API Service 🚀
              Built with Go + UberFX + Clean Architecture
```

## 🎯 Overview

A modern, production-ready REST API built with Go, featuring clean architecture, dependency injection with UberFX, and comprehensive middleware support.

## ✨ Features

- 🏗️ **Clean Architecture**: Organized in layers for maintainability
- 🔌 **UberFX**: Dependency injection framework for better modularity
- 📝 **Structured Logging**: Using Zap for high-performance logging
- 🔐 **JWT Authentication**: Secure authentication with role-based access
- 🗄️ **PostgreSQL**: Database integration with GORM
- 🛡️ **Middleware**: CORS, error handling, request logging
- 📚 **API Documentation**: Auto-generated with Swagger
- 🐳 **Docker Ready**: Containerization support
- 🧪 **Testing**: Comprehensive test structure
- ⚙️ **Configuration**: Environment-based configuration management

## 🚀 Quick Start

### Prerequisites

- Go 1.24+
- PostgreSQL 12+
- Docker (optional)

### Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd {{.Name}}
   ```

2. **Install dependencies**
   ```bash
   go mod tidy
   ```

3. **Set up environment**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

4. **Run the application**
   ```bash
   go run cmd/app/main.go
   ```

### Using Docker

```bash
# Build and run with Docker Compose
docker-compose up --build

# Or build manually
docker build -t {{.Name}} .
docker run -p 8080:8080 {{.Name}}
```

## 📁 Project Structure

```
{{.Name}}/
├── cmd/
│   └── app/                 # Application entry point
├── config/                  # Configuration management
├── internal/
│   ├── adapter/
│   │   └── http/           # HTTP handlers and routes
│   ├── app/
│   │   ├── dto/            # Data Transfer Objects
│   │   ├── middleware/     # HTTP middleware
│   │   └── service/        # Business logic services
│   ├── domain/
│   │   ├── entity/         # Domain entities
│   │   └── enum/           # Domain enums
│   └── infrastructure/
│       ├── database/       # Database configuration
│       └── repository/     # Data access layer
├── pkg/
│   ├── authentication/     # JWT utilities
│   ├── errors/            # Error handling
│   ├── graceful/          # Graceful shutdown
│   ├── logger/            # Logging utilities
│   ├── swagger/           # API documentation
│   ├── util/              # Common utilities
│   └── wrapper/           # Response wrappers
├── test/                  # Test files
├── deployment/            # Deployment configurations
├── assets/               # Static assets
└── static/               # Static files
```

## ⚙️ Configuration

The application uses environment variables for configuration. Copy `.env.example` to `.env` and adjust the values:

```env
# Server Configuration
PORT=8080
ENVIRONMENT=development
GIN_MODE=debug

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=postgres
DB_NAME={{.Name}}
DB_SSL_MODE=disable

# JWT Configuration
JWT_SECRET=your-secret-key
JWT_EXPIRATION_TIME=24h
JWT_REFRESH_EXPIRATION_TIME=168h

# CORS Configuration
CORS_ALLOW_ORIGINS=*
CORS_ALLOW_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
CORS_ALLOW_HEADERS=Content-Type,X-XSRF-TOKEN,Accept,Origin,X-Requested-With,Authorization
```

## 🛡️ Security Features

- **JWT Authentication**: Secure token-based authentication
- **Role-based Access Control**: Fine-grained permission system
- **CORS Protection**: Configurable Cross-Origin Resource Sharing
- **Input Validation**: Request validation using struct tags
- **Rate Limiting**: (Ready to implement)
- **Request Logging**: Comprehensive request/response logging

## 📚 API Documentation

Once the server is running, visit:
- **Swagger UI**: `http://localhost:8080/swagger/index.html`
- **API Docs**: `http://localhost:8080/swagger/doc.json`

## 🧪 Testing

```bash
# Run all tests
go test ./...

# Run tests with coverage
go test -cover ./...

# Run integration tests
go test ./test/integration/...
```

## 🚀 Deployment

### Environment-specific configurations:

- **Development**: `development.env`
- **Staging**: `staging.env`
- **Production**: `production.env`

### Kubernetes deployment:

```bash
kubectl apply -f deployment/k8s/
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [UberFX](https://github.com/uber-go/fx) - Dependency injection framework
- [Gin](https://github.com/gin-gonic/gin) - HTTP web framework
- [GORM](https://gorm.io/) - ORM library
- [Zap](https://github.com/uber-go/zap) - Structured logging
- [Viper](https://github.com/spf13/viper) - Configuration management

---

**Happy coding! 🚀**
