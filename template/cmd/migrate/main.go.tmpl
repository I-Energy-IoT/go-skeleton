package main

import (
	"flag"
	"fmt"
	"log"
	"os"

	"{{.Name}}/config"

	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

func main() {
	// Parse command line flags
	up := flag.Bool("up", false, "Apply all pending migrations")
	down := flag.Bool("down", false, "Revert the last migration")
	version := flag.Bool("version", false, "Show current migration version")
	force := flag.Int("force", 0, "Force migration version")
	flag.Parse()

	// Load configuration
	cfg, err := config.NewConfig()
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Construct database URL
	dbURL := fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=%s",
		cfg.DB.User,
		cfg.DB.Password,
		cfg.DB.Host,
		cfg.DB.Port,
		cfg.DB.DBName,
		cfg.DB.SSLMode,
	)

	// Create migration instance
	m, err := migrate.New(
		"file://migration",
		dbURL,
	)
	if err != nil {
		log.Fatalf("Failed to create migration instance: %v", err)
	}

	// Execute commands
	switch {
	case *up:
		if err := m.Up(); err != nil && err != migrate.ErrNoChange {
			log.Fatalf("Failed to apply migrations: %v", err)
		}
		fmt.Println("Migrations applied successfully")
	case *down:
		if err := m.Steps(-1); err != nil && err != migrate.ErrNoChange {
			log.Fatalf("Failed to revert migration: %v", err)
		}
		fmt.Println("Migration reverted successfully")
	case *version:
		v, dirty, err := m.Version()
		if err != nil && err != migrate.ErrNilVersion {
			log.Fatalf("Failed to get migration version: %v", err)
		}
		if err == migrate.ErrNilVersion {
			fmt.Println("No migrations applied")
		} else {
			fmt.Printf("Current migration version: %d (dirty: %v)\n", v, dirty)
		}
	case *force > 0:
		if err := m.Force(*force); err != nil {
			log.Fatalf("Failed to force migration version: %v", err)
		}
		fmt.Printf("Migration version forced to %d\n", *force)
	default:
		fmt.Println("Please specify a command: -up, -down, -version, or -force")
		os.Exit(1)
	}
}
