package main

import (
	"context"
	"fmt"
	"time"

	"{{.Name}}/config"
	"{{.Name}}/internal"
	"{{.Name}}/pkg/graceful"
	"{{.Name}}/pkg/logger"
	"{{.Name}}/pkg/swagger"

	"github.com/gin-gonic/gin"
	"github.com/spf13/cast"
	"go.uber.org/fx"
	"go.uber.org/fx/fxevent"
	"go.uber.org/zap"
)

// setupSwaggerHandler sets up Swagger documentation endpoints
func setupSwaggerHandler(g *gin.Engine) {
	swaggerAPI := g.Group("/swagger")
	swag := swagger.NewSwagger()
	swaggerAPI.Use(swag.SwaggerHandler(false))
	swag.Register(swaggerAPI)
}

// startServer initializes and starts the HTTP server
func startServer(g *gin.Engine, lifecycle fx.Lifecycle, logger logger.Logger, config *config.Config) {
	gracefulService := graceful.NewService(
		graceful.WithStopTimeout(time.Second*30),
		graceful.WithWaitTime(time.Second*10),
	)
	gracefulService.Register(g)

	lifecycle.Append(
		fx.Hook{
			OnStart: func(ctx context.Context) error {
				port := cast.ToString(config.Server.Port)
				if port == "" {
					port = "8080"
				}
				
				logger.WithField("port", port).Info("Starting server")
				
				if err := gracefulService.StartServer(g, port); err != nil {
					logger.Error("Failed to start server", zap.Error(err))
					return fmt.Errorf("failed to start server: %w", err)
				}
				
				logger.Info("Server started successfully")
				return nil
			},
			OnStop: func(ctx context.Context) error {
				logger.Info("Stopping server")
				if err := gracefulService.Close(logger); err != nil {
					logger.Error("Failed to close server gracefully", zap.Error(err))
					return fmt.Errorf("failed to close server: %w", err)
				}
				logger.Info("Server stopped successfully")
				return nil
			},
		},
	)
}

func main() {
	app := fx.New(
		config.Module,
		logger.Module,
		fx.WithLogger(func(log logger.Logger) fxevent.Logger {
			return log
		}),
		fx.Invoke(setupSwaggerHandler, startServer),
		internal.Module,
	)

	app.Run()
}
