package entity

import (
	"context"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

// UserRole represents the relationship between users and roles
type UserRole struct {
	ID     uuid.UUID `gorm:"primaryKey;type:uuid;default:gen_random_uuid()"`
	UserID uuid.UUID `gorm:"not null;index"`
	User   User      `gorm:"foreignKey:UserID;references:ID;constraint:OnDelete:CASCADE"`
	RoleID uuid.UUID `gorm:"not null;index"`
	Role   Role      `gorm:"foreignKey:RoleID;references:ID;constraint:OnDelete:CASCADE"`
}

// TableName returns the table name for UserRole
func (ur *UserRole) TableName() string {
	return "user_roles"
}

// BeforeCreate sets the ID before creating a new user role
func (ur *UserRole) BeforeCreate(tx *gorm.DB) error {
	if ur.ID == uuid.Nil {
		ur.ID = uuid.New()
	}
	return nil
}

// UserRoleRepository defines the interface for user role data operations
type UserRoleRepository interface {
	Create(ctx context.Context, userRole *UserRole) error
	Update(ctx context.Context, userRole *UserRole) error
	Delete(ctx context.Context, userRole *UserRole) error
}
