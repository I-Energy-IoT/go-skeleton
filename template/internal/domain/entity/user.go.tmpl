package entity

import (
	"context"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

// User represents a user in the system
type User struct {
	ID       uuid.UUID  `gorm:"primaryKey;type:uuid;default:gen_random_uuid()"`
	Username string     `gorm:"uniqueIndex;not null;size:50"`
	Password string     `gorm:"not null;size:255"`
	Email    string     `gorm:"uniqueIndex;not null;size:100"`
	Role     []UserRole `gorm:"foreignKey:UserID;references:ID;constraint:OnDelete:CASCADE"`
	BaseEntity
}

// TableName returns the table name for User
func (u *User) TableName() string {
	return "users"
}

// BeforeCreate sets the ID before creating a new user
func (u *User) BeforeCreate(tx *gorm.DB) error {
	if u.ID == uuid.Nil {
		u.ID = uuid.New()
	}
	return nil
}

// UserRepository defines the interface for user data operations
type UserRepository interface {
	Create(ctx context.Context, user *User, createdBy string) error
	Update(ctx context.Context, user *User, updatedBy string) error
	Delete(ctx context.Context, user *User, deletedBy string) error
	GetByID(ctx context.Context, id uuid.UUID) (*User, error)
	GetByUsername(ctx context.Context, username string) (*User, error)
	GetRoleByUserID(ctx context.Context, userID string) ([]string, error)
}
