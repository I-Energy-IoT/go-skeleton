package entity

import (
	"context"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

// Role represents a user role in the system
type Role struct {
	ID    uuid.UUID  `gorm:"primaryKey;type:uuid;default:gen_random_uuid()"`
	Name  string     `gorm:"uniqueIndex;not null;size:50"`
	Users []UserRole `gorm:"foreignKey:RoleID;references:ID;constraint:OnDelete:CASCADE"`
}

// TableName returns the table name for Role
func (r *Role) TableName() string {
	return "roles"
}

// BeforeCreate sets the ID before creating a new role
func (r *Role) BeforeCreate(tx *gorm.DB) error {
	if r.ID == uuid.Nil {
		r.ID = uuid.New()
	}
	return nil
}

// RoleRepository defines the interface for role data operations
type RoleRepository interface {
	Create(ctx context.Context, role *Role) error
	Delete(ctx context.Context, role *Role) error
	GetByName(ctx context.Context, name string) (*Role, error)
}
