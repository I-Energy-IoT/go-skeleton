package service

import (
	"{{.Name}}/internal/app/constant"
	"{{.Name}}/internal/app/dto"
	"{{.Name}}/internal/domain/entity"

	"github.com/google/uuid"
	"go.uber.org/fx"
	"golang.org/x/crypto/bcrypt"
)

type UserService interface {
	CreateUser(req *dto.UserCreateRequest) (*dto.UserDetailResponse, error)
	ValidateUser(req *dto.LoginRequest) (*dto.UserDetailResponse, error)
	GetUserByID(id string) (*dto.UserDetailResponse, error)
	UpdateUser(id string, req *dto.UserUpdateRequest) (*dto.UserDetailResponse, error)
	DeleteUser(id string) error
}

type userService struct {
	userRepository     entity.UserRepository
	userRoleRepository entity.UserRoleRepository
	roleRepository     entity.RoleRepository
}

// DeleteUser implements UserService.
func (u *userService) DeleteUser(id string) error {
	userID, err := uuid.Parse(id)
	if err != nil {
		return err
	}

	user, err := u.userRepository.GetByID(userID)
	if err != nil {
		return err
	}

	if err := u.userRepository.Delete(user, userID.String()); err != nil {
		return err
	}

	return nil
}

// GetUserByID implements UserService.
func (u *userService) GetUserByID(id string) (*dto.UserDetailResponse, error) {
	userID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	user, err := u.userRepository.GetByID(userID)
	if err != nil {
		return nil, err
	}

	return dto.FromEntity(user), nil
}

// UpdateUser implements UserService.
func (u *userService) UpdateUser(id string, req *dto.UserUpdateRequest) (*dto.UserDetailResponse, error) {
	userID, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	user, err := u.userRepository.GetByID(userID)
	if err != nil {
		return nil, err
	}

	user.Username = req.Username
	user.Email = req.Email

	if err := u.userRepository.Update(user, userID.String()); err != nil {
		return nil, err
	}

	return dto.FromEntity(user), nil
}

// CreateUser implements UserService.
func (u *userService) CreateUser(req *dto.UserCreateRequest) (*dto.UserDetailResponse, error) {
	user := &entity.User{
		Username: req.Username,
		Email:    req.Email,
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}
	user.Password = string(hashedPassword)

	if err := u.userRepository.Create(user, "SYSTEM"); err != nil {
		return nil, err
	}

	role, err := u.roleRepository.GetByName(constant.RoleUser)
	if err != nil {
		return nil, err
	}

	userRole := &entity.UserRole{
		UserID: user.ID,
		RoleID: role.ID,
	}

	if err := u.userRoleRepository.Create(userRole); err != nil {
		return nil, err
	}

	return dto.FromEntity(user), nil
}

// ValidateUser implements UserService.
func (u *userService) ValidateUser(req *dto.LoginRequest) (*dto.UserDetailResponse, error) {
	user, err := u.userRepository.GetByUsername(req.Username)
	if err != nil {
		return nil, err
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(req.Password)); err != nil {
		return nil, err
	}

	return dto.FromEntity(user), nil
}

type userServiceParams struct {
	fx.In
	UserRepository     entity.UserRepository
	UserRoleRepository entity.UserRoleRepository
	RoleRepository     entity.RoleRepository
}

func NewUserService(params userServiceParams) UserService {
	return &userService{
		userRepository:     params.UserRepository,
		userRoleRepository: params.UserRoleRepository,
		roleRepository:     params.RoleRepository,
	}
}
