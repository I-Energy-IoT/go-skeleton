package middleware

import (
	"time"

	"{{.Name}}/pkg/logger"

	"github.com/gin-gonic/gin"
)

type LoggingMiddleware struct {
	logger logger.Logger
}

func NewLoggingMiddleware(logger logger.Logger) *LoggingMiddleware {
	return &LoggingMiddleware{logger: logger}
}

// LoggingMiddleware provides request logging for HTTP requests
func (m *LoggingMiddleware) Middleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		start := time.Now()

		// Create a child logger with request context
		reqLogger := m.logger.
			WithContext(c.Request.Context()).
			WithFields(map[string]interface{}{
				"method":     c.Request.Method,
				"path":       c.Request.URL.Path,
				"client_ip":  c.ClientIP(),
				"user_agent": c.Request.UserAgent(),
			})

		// Process request
		c.Next()

		// Calculate response time
		duration := time.Since(start)
		
		// Log request completion with status and timing
		reqLogger.WithStatusCode(c.Writer.Status()).
			WithResponseTime(float64(duration.Milliseconds())).
			Info("request completed")
	}
}
