package repository

import (
	"{{.Name}}/internal/domain/entity"
	"{{.Name}}/internal/infrastructure/database"
)

type roleRepository struct {
	db database.PostgreDB
}

// Create implements entity.RoleRepository.
func (r *roleRepository) Create(role *entity.Role) error {
	return r.db.GetDB().Create(role).Error
}

// Delete implements entity.RoleRepository.
func (r *roleRepository) Delete(role *entity.Role) error {
	return r.db.GetDB().Delete(role).Error
}

// GetByName implements entity.RoleRepository.
func (r *roleRepository) GetByName(name string) (*entity.Role, error) {
	var role entity.Role
	if err := r.db.GetDB().Where("name = ?", name).First(&role).Error; err != nil {
		return nil, err
	}
	return &role, nil
}

func initData(db database.PostgreDB) error {
	roles := []entity.Role{
		{Name: "admin"},
		{Name: "user"},
	}
	return db.GetDB().Create(&roles).Error
}

func NewRoleRepository(db database.PostgreDB) entity.RoleRepository {
	return &roleRepository{db: db}
}
