package repository

import (
	"{{.Name}}/internal/domain/entity"
	"{{.Name}}/internal/infrastructure/database"

	"github.com/google/uuid"
)

type userRepository struct {
	db database.PostgreDB
}

// GetRoleByUserID implements entity.UserRepository.
func (u *userRepository) GetRoleByUserID(userID string) ([]string, error) {
	var roles []string
	if err := u.db.GetDB().Model(&entity.UserRole{}).
		Joins("Role").
		Where("user_id = ?", userID).
		Pluck("Role.name", &roles).Error; err != nil {
		return nil, err
	}
	return roles, nil
}

// Create implements entity.UserRepository.
func (u *userRepository) Create(user *entity.User, createdBy string) error {
	user.CreatedBy = createdBy
	return u.db.GetDB().Create(user).Error
}

// Delete implements entity.UserRepository.
func (u *userRepository) Delete(user *entity.User, deletedBy string) error {
	u.db.GetDB().Model(user).Updates(map[string]interface{}{
		"deleted_by": deletedBy,
	})
	return u.db.GetDB().Delete(user).Error
}

// GetByID implements entity.UserRepository.
func (u *userRepository) GetByID(id uuid.UUID) (*entity.User, error) {
	var user entity.User
	if err := u.db.GetDB().Where("id = ?", id).First(&user).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

// GetByUsername implements entity.UserRepository.
func (u *userRepository) GetByUsername(username string) (*entity.User, error) {
	var user entity.User
	if err := u.db.GetDB().Where("username = ?", username).First(&user).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

// Update implements entity.UserRepository.
func (u *userRepository) Update(user *entity.User, updatedBy string) error {
	u.db.GetDB().Model(user).Updates(map[string]interface{}{
		"updated_by": updatedBy,
	})
	return u.db.GetDB().Save(user).Error
}

func NewUserRepository(db database.PostgreDB) entity.UserRepository {
	return &userRepository{db: db}
}
